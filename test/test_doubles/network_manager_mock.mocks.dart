// Mocks generated by Mockito 5.4.2 from annotations
// in to_do/test/test_doubles/network_manager_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:to_do/data/remote/network_manager.dart' as _i2;
import 'package:to_do/domain/models/task.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i2.NetworkManager {
  @override
  _i3.Future<List<_i4.Task>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);
  @override
  _i3.Future<int> updateTasks(
    List<_i4.Task>? tasks,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [
            tasks,
            revision,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<_i4.Task?> getTask(
    int? taskId,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [
            taskId,
            revision,
          ],
        ),
        returnValue: _i3.Future<_i4.Task?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Task?>.value(),
      ) as _i3.Future<_i4.Task?>);
  @override
  _i3.Future<int> addTask(
    _i4.Task? task,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [
            task,
            revision,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> changeTask(
    _i4.Task? task,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeTask,
          [
            task,
            revision,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> removeTask(
    String? taskId,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [
            taskId,
            revision,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> getRevision() => (super.noSuchMethod(
        Invocation.method(
          #getRevision,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
